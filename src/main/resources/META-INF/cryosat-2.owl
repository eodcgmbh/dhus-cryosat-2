<?xml version="1.0"?>
<!--
   Data Hub Service (DHuS) - For Space data distribution.
   Copyright (C) 2019 GAEL Systems

   This file is part of DHuS software sources.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License as
   published by the Free Software Foundation, either version 3 of the
   License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
   GNU Affero General Public License for more details.

   You should have received a copy of the GNU Affero General Public License
   along with this program. If not, see <http://www.gnu.org/licenses/>.
-->
<!DOCTYPE rdf:RDF [
   <!ENTITY rdf  "http://www.w3.org/1999/02/22-rdf-syntax-ns#">
   <!ENTITY rdfs "http://www.w3.org/2000/01/rdf-schema#">
   <!ENTITY owl  "http://www.w3.org/2002/07/owl#">
   <!ENTITY cryosat2 "http://www.esa.int/cryosat2#"> 
   <!ENTITY drb  "http://www.gael.fr/drb#">
   <!ENTITY dhus "http://www.gael.fr/dhus#">
   ]>

<rdf:RDF xmlns:owl  = "&owl;"
         xmlns:rdf  = "&rdf;"
         xmlns:rdfs = "&rdfs;"
         xmlns:cryosat2 = "&cryosat2;"
         xmlns:drb  = "&drb;"
         xmlns:dhus = "&dhus;"
         xml:base   = "&cryosat2;">

   <owl:Ontology rdf:about="&cryosat2;"/>

   <!-- CRYOSAT PRODUCT  -->
   <rdf:Description rdf:about="&cryosat2;product">
      <dhus:metadataTypes rdf:parseType="Literal">
		  
         <!-- Indexed metadata -->
         
         <metadataType id="satellite"
                       name="Satellite"
                       contentType="text/plain"
                       category="summary">
         </metadataType>
         
         <metadataType id="instrument"
                       name="Instrument"
                       contentType="text/plain"
                       category="summary">
         </metadataType>
         
         <metadataType id="date"
                       name="Date"
                       contentType="text/date+iso8601"
                       category="summary">
         </metadataType>
         
         <!-- acquisition -->

         <metadataType id="beginPosition"
                       name="Sensing start"
                       contentType="text/date+iso8601"
                       category="product">
            <solrField name="beginposition"
                       type="tdate"/>
         </metadataType>

         <metadataType id="endPosition"
                       name="Sensing stop"
                       contentType="text/date+iso8601"
                       category="product">
            <solrField name="endposition"
                       type="tdate"/>
         </metadataType>
         
         <!-- footprint -->
         
         <metadataType id="GMLfootprint"
                       name="Footprint"
                       contentType="application/gml+xml"
                       category="product">
            <solrField name="gmlfootprint"
                       type="string"/>
         </metadataType>

         <metadataType id="footprint"
                       name="JTS footprint"
                       contentType="application/jts"
                       category="product">
            <solrField name="footprint"
                       type="location_rpt"/>
         </metadataType>
         
         <!-- platform -->

         <metadataType id="platformName"
                       name="Platform name"
                       contentType="text/plain"
                       category="platform">
            <solrField name="platformname"
                       type="text_general"/>
         </metadataType>

         <metadataType id="platformShortName"
                       name="Platform short name"
                       contentType="text/plain"
                       category="platform">
            <solrField name="platformshortname"
                       type="text_general"/>
         </metadataType>

         <metadataType id="platformSerialIdentifier"
                       name="Platform serial identifier"
                       contentType="text/plain"
                       category="platform">
            <solrField name="platformserialidentifier"
                       type="text_general"/>
         </metadataType>

         <metadataType id="platformNssdcIdentifier"
                       name="Platform NSSDC identifier"
                       contentType="text/plain"
                       category="platform">
            <solrField name="platformnssdcidentifier"
                       type="text_general"/>
         </metadataType>
         
         <!-- instrument -->

         <metadataType id="instrumentName"
                       name="Instrument name"
                       contentType="text/plain"
                       category="instrument">
            <solrField name="instrumentname"
                       type="text_general"/>
         </metadataType>

         <metadataType id="instrumentShortName"
                       name="Instrument short name"
                       contentType="text/plain"
                       category="instrument">
            <solrField name="instrumentshortname"
                       type="text_general"/>
         </metadataType>
         
         <!-- orbit -->

         <metadataType id="orbitNumber"
                       name="Orbit number"
                       contentType="text/integer"
                       category="product">
            <solrField name="orbitnumber"
                       type="int"/>
         </metadataType>

         <metadataType id="relativeOrbitNumber"
                       name="Relative orbit number"
                       contentType="text/integer"
                       category="product">
            <solrField name="relativeorbitnumber"
                       type="int"/>
         </metadataType>

         <metadataType id="cycle"
                       name="Cycle"
                       contentType="text/integer"
                       category="product">
            <solrField name="cycle"
                       type="int"/>
         </metadataType>

         <metadataType id="phase"
                       name="Phase"
                       contentType="text/integer"
                       category="product">
            <solrField name="phase"
                       type="int"/>
         </metadataType>
         
         <metadataType id="orbitDirection"
                       name="Orbit direction"
                       contentType="text/plain"
                       category="product">
            <solrField name="orbitdirection"
                       type="text_general"/>
         </metadataType>

         <!-- processing -->

         <metadataType id="processingLevel"
                       name="Processing level"
                       contentType="text/plain"
                       category="product">
            <solrField name="processinglevel"
                       type="text_general"/>
         </metadataType>

         <metadataType id="processorVersion"
                       name="Processor version"
                       contentType="text/plain"
                       category="product">
            <solrField name="processorversion"
                       type="text_general"/>
         </metadataType>

         <metadataType id="generationTime"
                       name="Generation time"
                       contentType="text/plain"
                       category="product">
         </metadataType>

         <metadataType id="processingMode"
                       name="Processing mode"
                       contentType="text/plain"
                       category="product">
            <solrField name="processingmode"
                       type="text_general"/>
         </metadataType>

         <metadataType id="processingModeAbbreviation"
                       name="Processing mode abbreviation"
                       contentType="text/plain"
                       category="product">
            <solrField name="processingmodeabbreviation"
                       type="text_general"/>
         </metadataType>
         
         <!-- other -->

         <metadataType id="productType"
                       name="Product type"
                       contentType="text/plain"
                       category="product">
            <solrField name="producttype"
                       type="text_general"/>
         </metadataType>

         <metadataType id="productDescription"
                       name="Product description"
                       contentType="text/plain"
                       category="product">
            <solrField name="productdescription"
                       type="text_general"/>
         </metadataType>

         <metadataType id="size"
                       name="Size"
                       contentType="text/plain"
                       category="summary">
            <solrField name="size"
                       type="string"/>
         </metadataType>
         
         <metadataType id="format"
                       name="Format"
                       contentType="text/plain"
                       category="product">
            <solrField name="format"
                       type="string"
                       required="true"/>
         </metadataType>
         
         <metadataType id="filename"
                       name="Filename"
                       contentType="text/plain"
                       category="summary">
            <solrField name="filename"
                       type="string"
                       required="true"/>
         </metadataType>
         
      </dhus:metadataTypes>
   </rdf:Description>

   <!-- CRYOSAT PRODUCT -->
   <rdf:Description rdf:about="&cryosat2;product">
      <dhus:support/>
      <dhus:identifier rdf:parseType="Literal">
      <![CDATA[
         fn:tokenize(name (.), '\.')[1]
      ]]>
      </dhus:identifier>

      <dhus:metadataExtractor  rdf:parseType="Literal">
      <![CDATA[
         <!-- ============================================================== -->
         <!-- FUNCTIONS                                                      -->
         <!-- ============================================================== -->

         declare function local:computeSizes ($path, $base as item()*) as item()*
         {
            let $product := .
            return
               fn:data($product/@size)
         };

         declare function local:roundHalfDown($arg, $precision) as xs:double*
         {
            xs:integer((xs:double($arg)*math:power(10, $precision))) div
               math:power(10, $precision)
         };

         declare function local:computedateTime ($inputDate as xs:string?) as xs:string
         {
            let $input := $inputDate
            return concat(substring($input, 5, 19),
                          ".000Z")
         };

		 declare function local:lon360to180($lon360 as xs:double?) as xs:double?
		 {
		 	let $lon180 := ($lon360 + 180) mod 360
	 		return ($lon180 - 180)
	 	 };         

	 	 declare function local:getIndices($count as xs:double?,
	 	                                   $reverse as xs:boolean?) as item()*
   		 {
		 let $step := (
					   if (xs:integer($count div 200) = 0)
				       then 1
					   else xs:integer($count div 200)
					  )
   		 let $indices1 := (
			for $index in (1 to $count) 
    			where $index mod $step = 0
    			return $index 
    			)
   		 let $indices2 := (
			for $index in (1 to $count) 
				let $i := xs:integer($count - $index + 1)
    			where $i mod $step = 0
    			return $i 
    			)
    	 return
    	     if ($reverse)
    	     then ($count,$indices2,1)
    	     else (1,$indices1,$count)
   		 };	 	 

	 	 declare function local:getGmlFootprint($lats as item()*, 
	 	                                        $lons as item()*) as xs:string
   		 {
	   	 let $count := count($lats) 
		 return
			fn:string-join(
		 		(
				for $index in (1 to $count) 
				return 
				concat(local:truncateDecimal($lats[$index]),
					   ",",
					   local:truncateDecimal($lons[$index]))
				)," ")
   		 };
   		 
	 	 declare function local:getJtsFootprint($lats as item()*, 
	 	                                        $lons as item()*) as xs:string
   		 {
	   	 let $count := count($lats) 
		 return
		 concat(
            "POLYGON ((",
			fn:string-join(
		 		(
				for $index in (1 to $count) 
				return 
				concat(local:truncateDecimal($lons[$index]),
					   " ",
					   local:truncateDecimal($lats[$index]))
				),","),
			"))"
			)
   		 };   	  
   		                         
		 declare function local:truncateDecimal($num as xs:double?) as xs:string?
		 {
		    let $precision := 4
			let $int := fn:tokenize(xs:string($num),'\.')[1]
			let $dec := fn:substring(fn:tokenize(xs:string($num),'\.')[2],1,$precision)
			return concat($int,".",$dec)
		 };	 	    

         <!-- ============================================================== -->
         <!-- VARIABLES                                                      -->
         <!-- ============================================================== -->

         let $name := name()

         let $identifier := fn:tokenize(name (.), '\.')[1]
         let $tarFile := ./*[name(.) = fn:concat( $identifier, ".tar")]
         let $hdrFile := $tarFile/*[name(.) = fn:concat( $identifier, ".HDR")]
         let $ncFile := $tarFile/*[name(.) = fn:concat( $identifier, ".nc")]
         let $root := $ncFile/root

         let $VAR_Earth_Explorer_Header := $hdrFile/Earth_Explorer_Header

         let $VAR_Fixed_Header := $VAR_Earth_Explorer_Header/Fixed_Header

         let $VAR_Variable_Header := $VAR_Earth_Explorer_Header/Variable_Header

         let $VAR_beginPosition := local:computedateTime(
            data($VAR_Fixed_Header/Validity_Period/Validity_Start))

         let $VAR_endPosition := local:computedateTime(
            data($VAR_Fixed_Header/Validity_Period/Validity_Stop))

         let $VAR_lat_scale := xs:float(fn:data($root/variables/lat_01/attributes/scale_factor))
         let $VAR_lon_scale := xs:float(fn:data($root/variables/lon_01/attributes/scale_factor))
         let $axis_name := fn:data($root/variables/lon_01/axisName)
         
         let $count := fn:count(fn:data($root/dataset/*[name(.) = $axis_name]/*[name(.) = $axis_name]))   
         
         let $offset := 0.001     

		 let $lons1 := (
		   for $i in local:getIndices($count,xs:boolean("false"))
			  return fn:data($root/dataset/lon_01/*[name(.) = $axis_name])[$i] * $VAR_lon_scale )
			  
		 let $lons2 := (
		   for $i in local:getIndices($count,xs:boolean("true"))
			  return fn:data($root/dataset/lon_01/*[name(.) = $axis_name])[$i] * $VAR_lon_scale + $offset)
			  
		 let $lats1 := (
		   for $i in local:getIndices($count,xs:boolean("false"))
			  return fn:data($root/dataset/lat_01/*[name(.) = $axis_name])[$i] * $VAR_lat_scale )
			  
		 let $lats2 := (
		   for $i in local:getIndices($count,xs:boolean("true"))
			  return fn:data($root/dataset/lat_01/*[name(.) = $axis_name])[$i] * $VAR_lat_scale + $offset)
			  
		 let $lons := ( $lons1, $lons2, $lons1[1] )
		 let $lats := ( $lats1, $lats2, $lats1[1] )
		 
         let $extractions :=
         (

         <!-- ============================================================== -->
         <!-- EXTRACTIONS                                                    -->
         <!-- ============================================================== -->

         <!-- Indexed metadata -->

         <!-- SATELLITE -->
         <metadata name="Satellite"
                   category="summary" type="text/plain">
         CryoSat-2
         </metadata>,
         
         <!-- INSTRUMENT -->
         <metadata name="Instrument"
                   category="summary" type="text/plain">
         SIRAL
         </metadata>,
         
         <!-- DATE -->
         <metadata name="Date"
                   category="summary" type="text/date+iso8601">
         { $VAR_beginPosition }
         </metadata>,
         
         
         <!-- acquisition -->

         <!-- SENSING START -->
         <metadata queryable="beginposition" name="Sensing start"
                   category="product" type="text/date+iso8601">
         { $VAR_beginPosition }
         </metadata>,

         <!-- SENSING STOP -->
         <metadata queryable="endposition" name="Sensing stop"
                   category="product" type="text/date+iso8601">
         { $VAR_endPosition }
         </metadata>,

        
         <!-- platform -->

         <!-- PLATFORM NAME -->
         <metadata queryable="platformname" name="Platform name"
                   category="platform" type="text/plain">
         CryoSat-2
         </metadata>,

         <!-- PLATFORM SHORT NAME -->
         <metadata queryable="platformshortname" name="Platform short name"
                   category="platform" type="text/plain">
         CryoSat-2
         </metadata>,

         <!-- PLATFORM SERIAL IDENTIFIER -->
         <metadata queryable="platformserialidentifier" name="Platform serial identifier"
                   category="platform" type="text/plain">
         2
         </metadata>,

         <!-- PLATFORM NSSDC IDENTIFIER -->
         <metadata queryable="platformnssdcidentifier" name="Platform NSSDC identifier"
                   category="platform" type="text/plain">
         2010-013A
         </metadata>,


         <!-- instrument -->

         <!-- INSTRUMENT NAME -->
         <metadata queryable="instrumentname" name="Instrument name"
                   category="instrument" type="text/plain">
         SAR/Interferometric Radar Altimeter
         </metadata>,

         <!-- INSTRUMENT SHORT NAME -->
         <metadata queryable="instrumentshortname" name="Instrument short name"
                   category="instrument" type="text/plain">
         SIRAL
         </metadata>,


         <!-- orbit -->

         <!-- ORBIT NUMBER -->
         <metadata queryable="orbitnumber" name="Orbit number"
                   category="product" type="text/integer">
         { xs:integer(fn:data($VAR_Variable_Header/MPH/Abs_Orbit)) }
         </metadata>,

         <!-- RELATIVE ORBIT NUMBER -->
         <metadata queryable="relativeorbitnumber" name="Relative orbit number"
                   category="product" type="text/integer">
         { xs:integer(fn:data($VAR_Variable_Header/MPH/Rel_Orbit)) }
         </metadata>,

         <!-- CYCLE -->
         <metadata queryable="cycle" name="Cycle"
                   category="product" type="text/integer">
         { xs:integer(fn:data($VAR_Variable_Header/MPH/Cycle)) }
         </metadata>,

         <!-- PHASE -->
         <metadata queryable="phase" name="Phase"
                   category="product" type="text/integer">
         { xs:integer(fn:data($VAR_Variable_Header/MPH/Phase)) }
         </metadata>,

         <!-- ORBIT DIRECTION -->
         <metadata queryable="orbitdirection" name="Orbit direction"
                   category="product" type="text/plain">
         {
           let $VAR_Ascending_Flag :=
              fn:data($VAR_Variable_Header/SPH/Orbit_Information/Ascending_Flag)
           return
              if ($VAR_Ascending_Flag = "A")
              then "ASCENDING"
              else if ($VAR_Ascending_Flag = "D")
              then "DESCENDING"
              else "UNKNOWN"
         }
         </metadata>,
         

         <!-- processing -->

         <!-- PROCESSING LEVEL -->
         <metadata queryable="processinglevel" name="Processing level"
                   category="product" type="text/plain">
         {
            let $VAR_level := fn:substring($name, 17, 1)
            return
               if ($VAR_level = "2")
               then "Level-2"
               else "UNKNOWN"
         }
         </metadata>,

         <!-- PROCESSOR VERSION -->
         <metadata queryable="processorversion" name="Processor version"
                   category="product" type="text/plain">
         { fn:data($VAR_Fixed_Header/Source/Creator_Version) }
         </metadata>,

         <!-- GENERATION TIME -->
         <metadata name="Generation time"
                   category="product" type="text/plain">
         {
           local:computedateTime(
              fn:data($VAR_Fixed_Header/Source/Creation_Date))
         }
         </metadata>,

         <!-- PROCESSING MODE -->
         <metadata queryable="processingmode" name="Processing mode"
                   category="product" type="text/plain">
         { fn:data($VAR_Fixed_Header/File_Class) }
         </metadata>,

         <!-- PROCESSING MODE ABBREVIATION -->
         <metadata queryable="processingmodeabbreviation" name="Processing mode abbreviation"
                   category="product" type="text/plain">
         { fn:data($VAR_Variable_Header/MPH/Proc_Stage_Code) }
         </metadata>,
         
         
         <!-- other -->
         
         <!-- PRODUCT TYPE -->
         <metadata queryable="producttype" name="Product type"
                   category="product" type="text/plain">
         { fn:data($VAR_Fixed_Header/File_Type)  }
         </metadata>,

         <!-- PRODUCT DESCRIPTION -->
         <metadata queryable="productdescription" name="Product description"
                   category="product" type="text/plain">
         { fn:data($VAR_Fixed_Header/File_Description)  }
         </metadata>,

         <!-- SIZE -->
         <!-- WARN The input product is a zip, and so the
         result should be wrong -->
         <metadata queryable="size" name="Size"
                   category="summary" type="text/plain">
         {
            let $size := xs:double(fn:sum(local:computeSizes(., ())))
            let $kilo := 1024
            let $mega := xs:integer($kilo * 1024)
            let $giga := xs:integer($mega * 1024)
            let $tera := xs:integer($giga * 1024)
            let $kilo_size := local:roundHalfDown(($size div $kilo), 2)
            let $mega_size := local:roundHalfDown(($size div $mega), 2)
            let $giga_size := local:roundHalfDown(($size div $giga), 2)
            let $tera_size := local:roundHalfDown(($size div $tera), 2)
            return
               if ($size < 1024)
               then
                  concat ($size, " bytes")
               else
                  if (($size div $kilo) < 1024)
                  then
                     concat ($kilo_size, " KB")
                  else
                     if (($size div $mega) < 1024)
                        then
                           concat ($mega_size, " MB")
                     else
                        if (($size div $giga) < 1024)
                        then
                           concat ($giga_size, " GB")
                        else
                           concat ($tera_size, " TB")
         }
         </metadata>,
         
         <!-- FORMAT -->
         <metadata queryable="format" name="Format"
                   category="product" type="text/plain">
            Earth-Explorer
         </metadata>,
         
         <!-- FILENAME -->
         <metadata queryable="filename" name="Filename"
                   category="summary" type="text/plain">
         { $name }
         </metadata>

         )
         
         let $footprints :=
         (
         <!-- footprint -->
      
         <metadata
            queryable="GMLfootprint"
            category="product"
            name="Footprint"
            type="application/gml+xml">
            <gml:Polygon xmlns:gml="http://www.opengis.net/gml"
               srsName="http://www.opengis.net/gml/srs/epsg.xml#4326">
                <gml:outerBoundaryIs>
                  <gml:LinearRing>
                     <gml:coordinates>
                        {
                        local:getGmlFootprint($lats,$lons)
                        }
                     </gml:coordinates>
                  </gml:LinearRing>
               </gml:outerBoundaryIs>
            </gml:Polygon>
         </metadata>,
         
         <metadata
            queryable="footprint"
            category="product"
            name="JTS footprint"
            type="application/jts">
                        {
                        local:getJtsFootprint($lats,$lons)
                        }
         </metadata>
         )
         
         return
         (
         if (empty($lons))
         then $extractions
         else ($extractions,$footprints)
         )
      ]]>
      </dhus:metadataExtractor>

   </rdf:Description>





   <!-- CRYOSAT PRODUCT netCDF  -->
   <rdf:Description rdf:about="&cryosat2;productNetCDF">
      <dhus:metadataTypes rdf:parseType="Literal">
		  
         <!-- Indexed metadata -->
         
         <metadataType id="satellite"
                       name="Satellite"
                       contentType="text/plain"
                       category="summary">
         </metadataType>
         
         <metadataType id="instrument"
                       name="Instrument"
                       contentType="text/plain"
                       category="summary">
         </metadataType>
         
         <metadataType id="date"
                       name="Date"
                       contentType="text/date+iso8601"
                       category="summary">
         </metadataType>
         
         <!-- acquisition -->

         <metadataType id="beginPosition"
                       name="Sensing start"
                       contentType="text/date+iso8601"
                       category="product">
            <solrField name="beginposition"
                       type="tdate"/>
         </metadataType>

         <metadataType id="endPosition"
                       name="Sensing stop"
                       contentType="text/date+iso8601"
                       category="product">
            <solrField name="endposition"
                       type="tdate"/>
         </metadataType>
         
         <!-- footprint -->
         
         <metadataType id="GMLfootprint"
                       name="Footprint"
                       contentType="application/gml+xml"
                       category="product">
            <solrField name="gmlfootprint"
                       type="string"/>
         </metadataType>

         <metadataType id="footprint"
                       name="JTS footprint"
                       contentType="application/jts"
                       category="product">
            <solrField name="footprint"
                       type="location_rpt"/>
         </metadataType>
         
         <!-- platform -->

         <metadataType id="platformName"
                       name="Platform name"
                       contentType="text/plain"
                       category="platform">
            <solrField name="platformname"
                       type="text_general"/>
         </metadataType>

         <metadataType id="platformShortName"
                       name="Platform short name"
                       contentType="text/plain"
                       category="platform">
            <solrField name="platformshortname"
                       type="text_general"/>
         </metadataType>

         <metadataType id="platformSerialIdentifier"
                       name="Platform serial identifier"
                       contentType="text/plain"
                       category="platform">
            <solrField name="platformserialidentifier"
                       type="text_general"/>
         </metadataType>

         <metadataType id="platformNssdcIdentifier"
                       name="Platform NSSDC identifier"
                       contentType="text/plain"
                       category="platform">
            <solrField name="platformnssdcidentifier"
                       type="text_general"/>
         </metadataType>         
         
         <!-- instrument -->

         <metadataType id="instrumentName"
                       name="Instrument name"
                       contentType="text/plain"
                       category="instrument">
            <solrField name="instrumentname"
                       type="text_general"/>
         </metadataType>

         <metadataType id="instrumentShortName"
                       name="Instrument short name"
                       contentType="text/plain"
                       category="instrument">
            <solrField name="instrumentshortname"
                       type="text_general"/>
         </metadataType>
         
         <!-- orbit -->

         <metadataType id="orbitNumber"
                       name="Orbit number"
                       contentType="text/integer"
                       category="product">
            <solrField name="orbitnumber"
                       type="int"/>
         </metadataType>

         <metadataType id="relativeOrbitNumber"
                       name="Relative orbit number"
                       contentType="text/integer"
                       category="product">
            <solrField name="relativeorbitnumber"
                       type="int"/>
         </metadataType>

         <metadataType id="cycle"
                       name="Cycle"
                       contentType="text/integer"
                       category="product">
            <solrField name="cycle"
                       type="int"/>
         </metadataType>

         <metadataType id="phase"
                       name="Phase"
                       contentType="text/plain"
                       category="product">
            <solrField name="phase"
                       type="int"/>
         </metadataType>
         
         <metadataType id="orbitDirection"
                       name="Orbit direction"
                       contentType="text/plain"
                       category="product">
            <solrField name="orbitdirection"
                       type="text_general"/>
         </metadataType>
         
         <!-- processing -->

         <metadataType id="processingLevel"
                       name="Processing level"
                       contentType="text/plain"
                       category="product">
            <solrField name="processinglevel"
                       type="text_general"/>
         </metadataType>

         <metadataType id="processorVersion"
                       name="Processor version"
                       contentType="text/plain"
                       category="product">
            <solrField name="processorversion"
                       type="text_general"/>
         </metadataType>

         <metadataType id="generationTime"
                       name="Generation time"
                       contentType="text/plain"
                       category="product">
         </metadataType>

         <metadataType id="processingMode"
                       name="Processing mode"
                       contentType="text/plain"
                       category="product">
            <solrField name="processingmode"
                       type="text_general"/>
         </metadataType>

         <metadataType id="processingModeAbbreviation"
                       name="Processing mode abbreviation"
                       contentType="text/plain"
                       category="product">
            <solrField name="processingmodeabbreviation"
                       type="text_general"/>
         </metadataType>
         
         <!-- other -->

         <metadataType id="productType"
                       name="Product type"
                       contentType="text/plain"
                       category="product">
            <solrField name="producttype"
                       type="text_general"/>
         </metadataType>

         <metadataType id="size"
                       name="Size"
                       contentType="text/plain"
                       category="summary">
            <solrField name="size"
                       type="string"/>
         </metadataType>

         <metadataType id="format"
                       name="Format"
                       contentType="text/plain"
                       category="product">
            <solrField name="format"
                       type="string"
                       required="true"/>
         </metadataType>
         
         <metadataType id="filename"
                       name="Filename"
                       contentType="text/plain"
                       category="summary">
            <solrField name="filename"
                       type="string"
                       required="true"/>
         </metadataType>
         
      </dhus:metadataTypes>
   </rdf:Description>
   

   <!-- CRYOSAT PRODUCT netCDF -->
   <rdf:Description rdf:about="&cryosat2;productNetCDF">
      <dhus:support/>
      <dhus:identifier rdf:parseType="Literal">
      <![CDATA[
         fn:tokenize(name (.), '\.')[1]
      ]]>
      </dhus:identifier>

      <dhus:metadataExtractor  rdf:parseType="Literal">
      <![CDATA[
         <!-- ============================================================== -->
         <!-- FUNCTIONS                                                      -->
         <!-- ============================================================== -->

         declare function local:computeSizes ($path, $base as item()*) as item()*
         {
            let $product := .
            return
               fn:data($product/@size)
         };

         declare function local:roundHalfDown($arg, $precision) as xs:double*
         {
            xs:integer((xs:double($arg)*math:power(10, $precision))) div
               math:power(10, $precision)
         };

		declare function local:computeDateTime($date as xs:string?) as xs:string
		{
			let $month := substring($date, 4, 3)
			let $day := substring($date, 1, 2)
			let $year := substring($date, 8, 4)
			let $time := substring($date, 13, 15)
			return
			if ($month = 'JAN') then
				concat($year, '-01-', $day, 'T', $time, 'Z')
			else if ($month = 'FEB') then
				concat($year, '-02-', $day, 'T', $time, 'Z')
			else if ($month = 'MAR') then
				concat($year, '-03-', $day, 'T', $time, 'Z')
			else if ($month = 'APR') then
				concat($year, '-04-', $day, 'T', $time, 'Z')
			else if ($month = 'MAY') then
				concat($year, '-05-', $day, 'T', $time, 'Z')
			else if ($month = 'JUN') then
				concat($year, '-06-', $day, 'T', $time, 'Z')
			else if ($month = 'JUL') then
				concat($year, '-07-', $day, 'T', $time, 'Z')
			else if ($month = 'AUG') then
				concat($year, '-08-', $day, 'T', $time, 'Z')
			else if ($month = 'SEP') then
				concat($year, '-09-', $day, 'T', $time, 'Z')
			else if ($month = 'OCT') then
				concat($year, '-10-', $day, 'T', $time, 'Z')
			else if ($month = 'NOV') then
				concat($year, '-11-', $day, 'T', $time, 'Z')
			else
				concat($year, '-12-', $day, 'T', $time, 'Z')
		};


		 declare function local:lon360to180($lon360 as xs:double?) as xs:double?
		 {
		 	let $lon180 := ($lon360 + 180) mod 360
	 		return ($lon180 - 180)
	 	 };         

	 	 declare function local:getIndices($count as xs:double?,
	 	                                   $reverse as xs:boolean?) as item()*
   		 {
		 let $step := (
					   if (xs:integer($count div 200) = 0)
				       then 1
					   else xs:integer($count div 200)
					  )
   		 let $indices1 := (
			for $index in (1 to $count) 
    			where $index mod $step = 0
    			return $index 
    			)
   		 let $indices2 := (
			for $index in (1 to $count) 
				let $i := xs:integer($count - $index + 1)
    			where $i mod $step = 0
    			return $i 
    			)
    	 return
    	     if ($reverse)
    	     then ($count,$indices2,1)
    	     else (1,$indices1,$count)
   		 };	 	 

	 	 declare function local:getGmlFootprint($lats as item()*, 
	 	                                        $lons as item()*) as xs:string
   		 {
	   	 let $count := count($lats) 
		 return
			fn:string-join(
		 		(
				for $index in (1 to $count) 
				return 
				concat(local:truncateDecimal($lats[$index]),
					   ",",
					   local:truncateDecimal($lons[$index]))
				)," ")
   		 };
   		 
	 	 declare function local:getJtsFootprint($lats as item()*, 
	 	                                        $lons as item()*) as xs:string
   		 {
	   	 let $count := count($lats) 
		 return
		 concat(
            "POLYGON ((",
			fn:string-join(
		 		(
				for $index in (1 to $count) 
				return 
				concat(local:truncateDecimal($lons[$index]),
					   " ",
					   local:truncateDecimal($lats[$index]))
				),","),
			"))"
			)
   		 };   	  
   		                         
		 declare function local:truncateDecimal($num as xs:double?) as xs:string?
		 {
		    let $precision := 4
			let $int := fn:tokenize(xs:string($num),'\.')[1]
			let $dec := fn:substring(fn:tokenize(xs:string($num),'\.')[2],1,$precision)
			return concat($int,".",$dec)
		 };	 	    

         <!-- ============================================================== -->
         <!-- VARIABLES                                                      -->
         <!-- ============================================================== -->

         let $name := name()

         let $root := ./root

         let $VAR_beginPosition := local:computeDateTime(
                 fn:data($root/attributes/*[name(.) = "sensing_start"]))
                 
         let $VAR_endPosition := local:computeDateTime(
                 fn:data($root/attributes/*[name(.) = "sensing_stop"]))
         
         let $VAR_lat_scale := xs:float(fn:data($root/variables/lat_01/attributes/scale_factor))
         let $VAR_lon_scale := xs:float(fn:data($root/variables/lon_01/attributes/scale_factor))
         let $axis_name := fn:data($root/variables/lon_01/axisName)
         
         let $count := fn:count(fn:data($root/dataset/*[name(.) = $axis_name]/*[name(.) = $axis_name]))   
         
         let $offset := 0.001     

		 let $lons1 := (
		   for $i in local:getIndices($count,xs:boolean("false"))
			  return fn:data($root/dataset/lon_01/*[name(.) = $axis_name])[$i] * $VAR_lon_scale )
			  
		 let $lons2 := (
		   for $i in local:getIndices($count,xs:boolean("true"))
			  return fn:data($root/dataset/lon_01/*[name(.) = $axis_name])[$i] * $VAR_lon_scale + $offset)
			  
		 let $lats1 := (
		   for $i in local:getIndices($count,xs:boolean("false"))
			  return fn:data($root/dataset/lat_01/*[name(.) = $axis_name])[$i] * $VAR_lat_scale )
			  
		 let $lats2 := (
		   for $i in local:getIndices($count,xs:boolean("true"))
			  return fn:data($root/dataset/lat_01/*[name(.) = $axis_name])[$i] * $VAR_lat_scale + $offset)
			  
		 let $lons := ( $lons1, $lons2, $lons1[1] )
		 let $lats := ( $lats1, $lats2, $lats1[1] )
		 
         return
         (

         <!-- ============================================================== -->
         <!-- EXTRACTIONS                                                    -->
         <!-- ============================================================== -->

         <!-- Indexed metadata -->

         <!-- SATELLITE -->
         <metadata name="Satellite"
                   category="summary" type="text/plain">
         CryoSat-2
         </metadata>,
         
         <!-- INSTRUMENT -->
         <metadata name="Instrument"
                   category="summary" type="text/plain">
         SIRAL
         </metadata>,
         
         <!-- DATE -->
         <metadata name="Date"
                   category="summary" type="text/date+iso8601">
         { $VAR_beginPosition }
         </metadata>,
         
         
         <!-- acquisition -->

         <!-- SENSING START -->
         <metadata queryable="beginposition" name="Sensing start"
                   category="product" type="text/date+iso8601">
         { $VAR_beginPosition }
         </metadata>,

         <!-- SENSING STOP -->
         <metadata queryable="endposition" name="Sensing stop"
                   category="product" type="text/date+iso8601">
         { $VAR_endPosition }
         </metadata>,
         
         
         <!-- footprint -->
      
         <metadata
            queryable="GMLfootprint"
            category="product"
            name="Footprint"
            type="application/gml+xml">
            <gml:Polygon xmlns:gml="http://www.opengis.net/gml"
               srsName="http://www.opengis.net/gml/srs/epsg.xml#4326">
                <gml:outerBoundaryIs>
                  <gml:LinearRing>
                     <gml:coordinates>
                        {
                        local:getGmlFootprint($lats,$lons)
                        }
                     </gml:coordinates>
                  </gml:LinearRing>
               </gml:outerBoundaryIs>
            </gml:Polygon>
         </metadata>,
         
         <metadata
            queryable="footprint"
            category="product"
            name="JTS footprint"
            type="application/jts">
                        {
                        local:getJtsFootprint($lats,$lons)
                        }
         </metadata>,
         

         <!-- platform -->

         <!-- PLATFORM NAME -->
         <metadata queryable="platformname" name="Platform name"
                   category="platform" type="text/plain">
         CryoSat-2
         </metadata>,

         <!-- PLATFORM SHORT NAME -->
         <metadata queryable="platformshortname" name="Platform short name"
                   category="platform" type="text/plain">
         CryoSat-2
         </metadata>,

         <!-- PLATFORM SERIAL IDENTIFIER -->
         <metadata queryable="platformserialidentifier" name="Platform serial identifier"
                   category="platform" type="text/plain">
         2
         </metadata>,

         <!-- PLATFORM NSSDC IDENTIFIER -->
         <metadata queryable="platformnssdcidentifier" name="Platform NSSDC identifier"
                   category="platform" type="text/plain">
         2010-013A
         </metadata>,


         <!-- instrument -->

         <!-- INSTRUMENT NAME -->
         <metadata queryable="instrumentname" name="Instrument name"
                   category="instrument" type="text/plain">
         SAR/Interferometric Radar Altimeter
         </metadata>,

         <!-- INSTRUMENT SHORT NAME -->
         <metadata queryable="instrumentshortname" name="Instrument short name"
                   category="instrument" type="text/plain">
         SIRAL
         </metadata>,


         <!-- orbit -->

         <!-- ORBIT NUMBER -->
         <metadata queryable="orbitnumber" name="Orbit number"
                   category="product" type="text/integer">
         { xs:integer(fn:data($root/attributes/*[name(.) = "abs_orbit_number"])) }
         </metadata>,

         <!-- RELATIVE ORBIT NUMBER -->
         <metadata queryable="relativeorbitnumber" name="Relative orbit number"
                   category="product" type="text/integer">
         { xs:integer(fn:data($root/attributes/*[name(.) = "rel_orbit_number"])) }
         </metadata>,

         <!-- CYCLE -->
         <metadata queryable="cycle" name="Cycle"
                   category="product" type="text/integer">
         { xs:integer(fn:data($root/attributes/*[name(.) = "cycle_number"])) }
         </metadata>,

         <!-- PHASE -->
         <metadata queryable="phase" name="Phase"
                   category="product" type="text/plain">
         { fn:data($root/attributes/*[name(.) = "phase"]) }
         </metadata>,

         <!-- ORBIT DIRECTION -->
         <metadata queryable="orbitdirection" name="Orbit direction"
                   category="product" type="text/plain">
         {
           let $VAR_Ascending_Flag :=
              fn:data($root/attributes/*[name(.) = "ascending_flag"])
           return
              if ($VAR_Ascending_Flag = "A")
              then "ASCENDING"
              else if ($VAR_Ascending_Flag = "D")
              then "DESCENDING"
              else "UNKNOWN"
         }
         </metadata>,
         

         <!-- processing -->

         <!-- PROCESSING LEVEL -->
         <metadata queryable="processinglevel" name="Processing level"
                   category="product" type="text/plain">
         {
            let $VAR_level := fn:substring($name, 17, 1)
            return
               if ($VAR_level = "2")
               then "Level-2"
               else "UNKNOWN"
         }
         </metadata>,

         <!-- PROCESSOR VERSION -->
         <metadata queryable="processorversion" name="Processor version"
                   category="product" type="text/plain">
         { 
           let $software_version :=
              fn:data($root/attributes/*[name(.) = "software_version"])
           return fn:tokenize($software_version,"\/")[2]
         }
         </metadata>,

         <!-- GENERATION TIME -->
         <metadata name="Generation time"
                   category="product" type="text/plain">
         {
           let $creation_time :=
              fn:data($root/attributes/*[name(.) = "creation_time"])
           return concat(substring($creation_time, 5, 19),
                          ".000Z")
         }
         </metadata>,

         <!-- PROCESSING MODE -->
         <metadata queryable="processingmode" name="Processing mode"
                   category="product" type="text/plain">
         {
           let $processing_stage :=
              fn:data($root/attributes/*[name(.) = "processing_stage"])
           return
              if ($processing_stage = "OFFL")
              then "Off-Line Processing"
              else if ($processing_stage = "LTA_")
              then "Long Term Archive"
              else if ($processing_stage = "NRT_")
              then "Near Real Time"
              else if ($processing_stage = "RPRO")
              then "Reprocessing"
              else if ($processing_stage = "TEST")
              then "Testing"
              else "UNKNOWN"
         }
         </metadata>,

         <!-- PROCESSING MODE ABBREVIATION -->
         <metadata queryable="processingmodeabbreviation" name="Processing mode abbreviation"
                   category="product" type="text/plain">
         { fn:data($root/attributes/*[name(.) = "processing_stage"]) }
         </metadata>,
         
         
         <!-- other -->
         
         <!-- PRODUCT TYPE -->
         <metadata queryable="producttype" name="Product type"
                   category="product" type="text/plain">
         { fn:substring($name, 9, 10)  }
         </metadata>,

         <!-- SIZE -->
         <!-- WARN The input product is a zip, and so the
         result should be wrong -->
         <metadata queryable="size" name="Size"
                   category="summary" type="text/plain">
         {
            let $size := xs:double(fn:sum(local:computeSizes(., ())))
            let $kilo := 1024
            let $mega := xs:integer($kilo * 1024)
            let $giga := xs:integer($mega * 1024)
            let $tera := xs:integer($giga * 1024)
            let $kilo_size := local:roundHalfDown(($size div $kilo), 2)
            let $mega_size := local:roundHalfDown(($size div $mega), 2)
            let $giga_size := local:roundHalfDown(($size div $giga), 2)
            let $tera_size := local:roundHalfDown(($size div $tera), 2)
            return
               if ($size < 1024)
               then
                  concat ($size, " bytes")
               else
                  if (($size div $kilo) < 1024)
                  then
                     concat ($kilo_size, " KB")
                  else
                     if (($size div $mega) < 1024)
                        then
                           concat ($mega_size, " MB")
                     else
                        if (($size div $giga) < 1024)
                        then
                           concat ($giga_size, " GB")
                        else
                           concat ($tera_size, " TB")
         }
         </metadata>,
         
         <!-- FORMAT -->
         <metadata queryable="format" name="Format"
                   category="product" type="text/plain">
         netCDF
         </metadata>,
         
         <!-- FILENAME -->
         <metadata queryable="filename" name="Filename"
                   category="summary" type="text/plain">
         { $name }
         </metadata>

         )
      ]]>
      </dhus:metadataExtractor>

   </rdf:Description>
   

</rdf:RDF>
